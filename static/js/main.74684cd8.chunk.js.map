{"version":3,"sources":["logo.svg","sidemenu.js","components/verseCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allButs","_this2","react_default","a","createElement","id","className","onClick","handleClose","map","e","i","handleClick","name","document","getElementById","style","width","_this3","fetch","then","response","json","arrayOfUsers","setState","catch","err","console","log","Component","verseCard","number","content","content_hindi","App","fetchData","status","firstLoad","handleRender","foo","bar","book","books","length","push","hadith","hadiths","components_verseCard","info","text","by","handleOnClick","src_sidemenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MC2DzBC,iCAvDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,QAAQ,IAJQR,wEAOV,IAAAS,EAAAN,KACP,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,WAC5BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBC,QAASZ,KAAKa,aAA9C,aAEEb,KAAKI,MAAMC,QAAQS,IAAI,SAACC,EAAEC,GACtB,OACIT,EAAAC,EAAAC,cAAA,OAAME,UAAU,iBAAiBC,QAAS,SAACG,GAAD,OAAKT,EAAKV,MAAMqB,YAAYD,KAAKD,EAAEG,gDAoB5FC,SAASC,eAAe,aAAaC,MAAMC,MAAQ,kDAInC,IAAAC,EAAAvB,KACbwB,MAAM,oDACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACzBF,KAAK,SAAAG,GAEDL,EAAKM,SAAS,CACZxB,QAAQuB,MAIfE,MAAM,SAASC,GACdC,QAAQC,IAAIF,YAnDCG,cCqBRC,qBApBb,SAAAA,EAAYvC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACjBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHIP,wEAOjB,OACEU,EAAAC,EAAAC,cAAA,OAAME,UAAU,aACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeX,KAAKJ,MAAMwC,QAExCpC,KAAKJ,MAAMyC,QACZ9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAcX,KAAKJ,MAAM0C,uBAbxBJ,cC+ITK,cA5Ib,SAAAA,EAAY3C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjB1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMJ,KA0ER4C,UAAY,SAACxB,GACPG,SAASC,eAAe,aAAaC,MAAMC,MAAQ,MACnDzB,EAAKgC,SAAS,CAACY,OAAO,EAAGC,UAAU,IACnClB,MAAM,6CAA+CR,EAAI,SACxDS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACzBF,KAAK,SAAAG,GAED/B,EAAK8C,aAAaf,KAEvBE,MAAM,SAASC,GACdC,QAAQC,IAAIF,MArFDlC,EAwFnB8C,aAAe,SAACC,GAMZ,IALF,IAAIC,EAAM,GAKCC,EAAK,EAAGA,EAAKF,EAAIG,MAAMC,OAAQF,IAAO,CAE7CD,EAAII,KAAK1C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAaiC,EAAIG,MAAMD,GAAM5B,OACnD,IAAK,IAAIgC,EAAO,EAAGA,EAAON,EAAIG,MAAMD,GAAMK,QAAQH,OAAQE,IAExDL,EAAII,KAAK1C,EAAAC,EAAAC,cAAC2C,EAAD,CAAWhB,OAAQQ,EAAIG,MAAMD,GAAMK,QAAQD,GAAQG,KAAMhB,QAASO,EAAIG,MAAMD,GAAMK,QAAQD,GAAQI,KAAMhB,cAAeM,EAAIG,MAAMD,GAAMK,QAAQD,GAAQK,MAGtKV,EAAII,KAAK1C,EAAAC,EAAAC,cAAA,YACTZ,EAAKgC,SAAS,CAACxB,QAASwC,GAAM,WAC5BhD,EAAKgC,SAAS,CAACY,OAAQ,OArG3B5C,EAAKO,MAAQ,CACZC,QAAQ,GACRoC,OAAO,EACPC,UAAU,GANM7C,wEAUjB,OACEU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACTJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAmBC,QAASZ,KAAKwD,eAC5CjD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAGjBX,KAAKI,MAAMqC,OACXzC,KAAKI,MAAMC,QAEX,GAGCL,KAAKI,MAAMqC,OAGZ,GAFAlC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,IAA0BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAzC,KAKAX,KAAKI,MAAMsC,UACXnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,UAAb,yPACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,kDACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,wDACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,UAAb,qOACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,2DACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,iEAGF,GAGAX,KAAKI,MAAMsC,UACTnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBAAkBC,QAASZ,KAAKwD,eAA/C,QAAwEjD,EAAAC,EAAAC,cAAA,YAG1E,GAGFT,KAAKI,MAAMsC,UACXnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,4FAAmFF,EAAAC,EAAAC,cAAA,WACjFF,EAAAC,EAAAC,cAAA,WADF,6BAKF,GAEFF,EAAAC,EAAAC,cAACgD,EAAD,CAAWxC,YAAajB,KAAKwC,qDAMpCrB,SAASC,eAAe,aAAaC,MAAMC,MAAQ,4DApEtCY,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.74684cd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './sidemenu.css';\n\nclass SideMenu extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[]\n   };\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"mySidenav\" className=\"sidenav\">\n          <div className=\"sidenav-button\" onClick={this.handleClose}>Close [X]</div>\n          {\n            this.state.allButs.map((e,i)=>{\n                return(\n                    <div  className=\"sidenav-button\" onClick={(e)=>this.props.handleClick(i)}>{e.name}</div>\n                )\n            })\n          }\n        </div>\n\n       {/* <div id=\"mySidenavHindi\" className=\"sidenav\">\n          <div className=\"sidenav-button\" onClick={this.handleClose}>X</div>\n          {\n            this.state.allButs.map((e,i)=>{\n                return(\n                    <div  className=\"sidenav-button\" onClick={(e)=>this.props.handleClick(i)}> {e.surahNumber} : {e.surahName}</div>\n                )\n            })\n          }          \n        </div>*/}\n      </div>\n    );\n  }\n  handleClose(){\n     document.getElementById(\"mySidenav\").style.width = \"0px\";\n     // document.getElementById(\"mySidenavHindi\").style.width = \"0px\";\n\n  }\n  componentDidMount(){\n        fetch('https://read-sahih-bukhari.firebaseio.com/9.json')\n        .then(response => response.json())\n         .then(arrayOfUsers => {\n              // console.log(arrayOfUse1rs);\n              this.setState({\n                allButs:arrayOfUsers\n              })\n              // rendersecondHTML(arrayOfUsers)\n         })\n        .catch(function(err){\n          console.log(err)\n        }) \n  }\n}\n\nexport default SideMenu;\n","import React, { Component } from 'react';\nimport '../css/verseCard.css';\n\nclass verseCard extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n   };\n  }\n  render() {\n    return (\n      <div  className=\"verseCard\">\n        <div className=\"verseNumber\">{this.props.number}</div>\n        {/*<div className=\"verseArabic\">{this.props.content_arabic}</div>*/}\n        {this.props.content}\n        <div className=\"verseHindi\">{this.props.content_hindi}</div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default verseCard;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SidemMenu from './sidemenu.js'\nimport VerseCard from './components/verseCard.js'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[],\n     status:1,\n     firstLoad:1\n   };\n  }  \n  render() {\n    return (\n      <div className=\"App\">\n            <div className=\"menuBarContainer\" onClick={this.handleOnClick}>\n                <div className=\"menubar\"></div>\n                <div className=\"menubar\"></div>\n                <div className=\"menubar\"></div>\n            </div>\n            {\n              this.state.status?\n              this.state.allButs\n              :\n              \"\"\n            }\n            {\n              !this.state.status?\n              <div className=\"loading\"> <div className=\"loader\"></div> </div>\n              :\n              \"\"\n            }\n            {\n              this.state.firstLoad?\n              <div className=\"homePage\">\n                <p className=\"arabic\">أعوذُ بِٱللَّهِ مِنَ ٱلشَّيۡطَٰنِ ٱلرَّجِيمِ </p>\n                <p className=\"english\">a’udhu billahi min ash-shaytaan-ir-rajeem</p>\n                <p className=\"meaning\">(I seek protection in Allah from the accursed satan)</p>\n                <p className=\"arabic\">بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ</p>\n                <p className=\"english\">bi-smi llāhi r-raḥmāni r-raḥīm</p>\n                <p className=\"meaning\">(In the name of Allah, the Most Gracious, the Most Merciful)</p>                \n              </div>\n              :\n              \"\"\n            }\n            {\n              this.state.firstLoad?\n                <div className=\"language\">\n                <br></br><br></br>\n                  <div className=\"languageEnglish\" onClick={this.handleOnClick}>Read</div><br></br>\n                </div>\n                :\n                \"\"              \n            }\n            {\n              this.state.firstLoad?\n              <div className=\"footer\">\n                <p>Collector: Abu Abdullah Muhammad bin Ismail bin Ibrahim bin al-Mughira al-Ja'fai<br></br>\n                  <br></br>Developer: Akhzar Farhan\n                </p>\n              </div>\n              :\n              \"\"\n            }\n            <SidemMenu handleClick={this.fetchData}/>\n            {/*<SidemMenu handleClick={this.fetchDataHindi}/>*/}\n      </div>\n    );\n  }\n  handleOnClick(){\n     document.getElementById(\"mySidenav\").style.width = \"250px\";\n  }\n  componentDidMount(){\n\n  }\n  // hindiOnClick(){\n  //   document.getElementById(\"mySidenavHindi\").style.width = \"250px\";\n  // }\n  fetchData = (i)=>{\n        document.getElementById(\"mySidenav\").style.width = \"0px\";\n        this.setState({status:0, firstLoad:0})\n        fetch('https://read-sahih-bukhari.firebaseio.com/' + i + '.json')\n        .then(response => response.json())\n         .then(arrayOfUsers => {\n              // console.log(arrayOfUsers);\n              this.handleRender(arrayOfUsers)\n         })\n        .catch(function(err){\n          console.log(err)\n        })     \n  }\n  handleRender = (foo)=>{\n    let bar = []\n    // console.log(Object.keys(foo).length)\n    // console.log(Object.keys(foo))\n    // console.log(typeof foo)\n    // console.log(foo.books[0].hadiths[0].text)\n      for (let book=0; book<foo.books.length; book++){\n        // console.log(foo.books[book].hadiths)\n        bar.push(<div className=\"surahName\">{foo.books[book].name}</div>)\n          for (let hadith=0; hadith<foo.books[book].hadiths.length; hadith++){\n            // console.log(foo.books[book].hadiths[hadith].text)\n            bar.push(<VerseCard number={foo.books[book].hadiths[hadith].info} content={foo.books[book].hadiths[hadith].text} content_hindi={foo.books[book].hadiths[hadith].by} />)\n          }\n      }\n      bar.push(<br></br>)\n      this.setState({allButs: bar}, ()=>{\n        this.setState({status: 1})\n      })\n\n    }\n      // let bar = []\n      // // console.log(e)\n      // foo.forEach((e,i)=>{\n      //   console.log(i)\n      //   if(i==0){\n      //     bar.push(<div className=\"surahName\">{e.name}</div>)\n      //     // console.log(e.name)\n      //   }\n      //   bar.push(<VerseCard number={e.hadiths[i].info} content={e.hadiths[i].text} content_hindi={e.hadiths[i].by} />)          \n\n      // })\n      // bar.push(<br></br>)\n      // this.setState({allButs: bar},()=>{\n      //   this.setState({status:1})\n      // })\n\n  }\n\n  // fetchDataHindi = (i)=>{\n  //   document.getElementById(\"mySidenavHindi\").style.width = \"0px\";\n  //   this.setState({status:0, firstLoad:0})\n  //   fetch('URL')\n  //   .then(response => response.json())\n  //   .then(arrayOfUsers => {\n  //     this.handleRenderHindi(arrayOfUsers)\n  //   })\n  //   .catch(function(err){\n  //     console.log(err)\n  //   })\n  // }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}